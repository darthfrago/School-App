#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace School.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="School")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertLearner(Learner instance);
    partial void UpdateLearner(Learner instance);
    partial void DeleteLearner(Learner instance);
    partial void InsertSubject(Subject instance);
    partial void UpdateSubject(Subject instance);
    partial void DeleteSubject(Subject instance);
    partial void InsertRegister(Register instance);
    partial void UpdateRegister(Register instance);
    partial void DeleteRegister(Register instance);
    partial void InsertMark(Mark instance);
    partial void UpdateMark(Mark instance);
    partial void DeleteMark(Mark instance);
    partial void InsertConcern(Concern instance);
    partial void UpdateConcern(Concern instance);
    partial void DeleteConcern(Concern instance);
    partial void InsertNewsEntry(NewsEntry instance);
    partial void UpdateNewsEntry(NewsEntry instance);
    partial void DeleteNewsEntry(NewsEntry instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SchoolConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<Learner> Learners
		{
			get
			{
				return this.GetTable<Learner>();
			}
		}
		
		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}
		
		public System.Data.Linq.Table<Register> Registers
		{
			get
			{
				return this.GetTable<Register>();
			}
		}
		
		public System.Data.Linq.Table<Mark> Marks
		{
			get
			{
				return this.GetTable<Mark>();
			}
		}
		
		public System.Data.Linq.Table<Concern> Concerns
		{
			get
			{
				return this.GetTable<Concern>();
			}
		}
		
		public System.Data.Linq.Table<NewsEntry> NewsEntries
		{
			get
			{
				return this.GetTable<NewsEntry>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private string _name;
		
		private string _surname;
		
		private string _email;
		
		private string _username;
		
		private string _password;
		
		private System.Nullable<int> _userType;
		
		private EntitySet<Learner> _Learners;
		
		private EntitySet<Register> _Registers;
		
		private EntitySet<Mark> _Marks;
		
		private EntitySet<Concern> _Concerns;
		
		private EntitySet<NewsEntry> _NewsEntries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnuserTypeChanging(System.Nullable<int> value);
    partial void OnuserTypeChanged();
    #endregion
		
		public User()
		{
			this._Learners = new EntitySet<Learner>(new Action<Learner>(this.attach_Learners), new Action<Learner>(this.detach_Learners));
			this._Registers = new EntitySet<Register>(new Action<Register>(this.attach_Registers), new Action<Register>(this.detach_Registers));
			this._Marks = new EntitySet<Mark>(new Action<Mark>(this.attach_Marks), new Action<Mark>(this.detach_Marks));
			this._Concerns = new EntitySet<Concern>(new Action<Concern>(this.attach_Concerns), new Action<Concern>(this.detach_Concerns));
			this._NewsEntries = new EntitySet<NewsEntry>(new Action<NewsEntry>(this.attach_NewsEntries), new Action<NewsEntry>(this.detach_NewsEntries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(50)")]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userType", DbType="Int")]
		public System.Nullable<int> userType
		{
			get
			{
				return this._userType;
			}
			set
			{
				if ((this._userType != value))
				{
					this.OnuserTypeChanging(value);
					this.SendPropertyChanging();
					this._userType = value;
					this.SendPropertyChanged("userType");
					this.OnuserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Learner", Storage="_Learners", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Learner> Learners
		{
			get
			{
				return this._Learners;
			}
			set
			{
				this._Learners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Register", Storage="_Registers", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Register> Registers
		{
			get
			{
				return this._Registers;
			}
			set
			{
				this._Registers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Mark", Storage="_Marks", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Mark> Marks
		{
			get
			{
				return this._Marks;
			}
			set
			{
				this._Marks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Concern", Storage="_Concerns", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<Concern> Concerns
		{
			get
			{
				return this._Concerns;
			}
			set
			{
				this._Concerns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NewsEntry", Storage="_NewsEntries", ThisKey="user_id", OtherKey="user_id")]
		public EntitySet<NewsEntry> NewsEntries
		{
			get
			{
				return this._NewsEntries;
			}
			set
			{
				this._NewsEntries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Learners(Learner entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Learners(Learner entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Registers(Register entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Registers(Register entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Concerns(Concern entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Concerns(Concern entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_NewsEntries(NewsEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_NewsEntries(NewsEntry entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classes")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _class_id;
		
		private string _className;
		
		private EntitySet<Learner> _Learners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onclass_idChanging(int value);
    partial void Onclass_idChanged();
    partial void OnclassNameChanging(string value);
    partial void OnclassNameChanged();
    #endregion
		
		public Class()
		{
			this._Learners = new EntitySet<Learner>(new Action<Learner>(this.attach_Learners), new Action<Learner>(this.detach_Learners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_class_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int class_id
		{
			get
			{
				return this._class_id;
			}
			set
			{
				if ((this._class_id != value))
				{
					this.Onclass_idChanging(value);
					this.SendPropertyChanging();
					this._class_id = value;
					this.SendPropertyChanged("class_id");
					this.Onclass_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_className", DbType="VarChar(50)")]
		public string className
		{
			get
			{
				return this._className;
			}
			set
			{
				if ((this._className != value))
				{
					this.OnclassNameChanging(value);
					this.SendPropertyChanging();
					this._className = value;
					this.SendPropertyChanged("className");
					this.OnclassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Learner", Storage="_Learners", ThisKey="class_id", OtherKey="class_id")]
		public EntitySet<Learner> Learners
		{
			get
			{
				return this._Learners;
			}
			set
			{
				this._Learners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Learners(Learner entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_Learners(Learner entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Learners")]
	public partial class Learner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _learner_id;
		
		private string _name;
		
		private string _surname;
		
		private System.Nullable<int> _age;
		
		private System.Nullable<int> _class_id;
		
		private System.Nullable<int> _user_id;
		
		private EntityRef<Register> _Register;
		
		private EntitySet<Mark> _Marks;
		
		private EntitySet<Concern> _Concerns;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlearner_idChanging(int value);
    partial void Onlearner_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OnageChanging(System.Nullable<int> value);
    partial void OnageChanged();
    partial void Onclass_idChanging(System.Nullable<int> value);
    partial void Onclass_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    #endregion
		
		public Learner()
		{
			this._Register = default(EntityRef<Register>);
			this._Marks = new EntitySet<Mark>(new Action<Mark>(this.attach_Marks), new Action<Mark>(this.detach_Marks));
			this._Concerns = new EntitySet<Concern>(new Action<Concern>(this.attach_Concerns), new Action<Concern>(this.detach_Concerns));
			this._Class = default(EntityRef<Class>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_learner_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int learner_id
		{
			get
			{
				return this._learner_id;
			}
			set
			{
				if ((this._learner_id != value))
				{
					this.Onlearner_idChanging(value);
					this.SendPropertyChanging();
					this._learner_id = value;
					this.SendPropertyChanged("learner_id");
					this.Onlearner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(50)")]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_age", DbType="Int")]
		public System.Nullable<int> age
		{
			get
			{
				return this._age;
			}
			set
			{
				if ((this._age != value))
				{
					this.OnageChanging(value);
					this.SendPropertyChanging();
					this._age = value;
					this.SendPropertyChanged("age");
					this.OnageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_class_id", DbType="Int")]
		public System.Nullable<int> class_id
		{
			get
			{
				return this._class_id;
			}
			set
			{
				if ((this._class_id != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onclass_idChanging(value);
					this.SendPropertyChanging();
					this._class_id = value;
					this.SendPropertyChanged("class_id");
					this.Onclass_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Learner_Register", Storage="_Register", ThisKey="learner_id", OtherKey="register_id", IsUnique=true, IsForeignKey=false)]
		public Register Register
		{
			get
			{
				return this._Register.Entity;
			}
			set
			{
				Register previousValue = this._Register.Entity;
				if (((previousValue != value) 
							|| (this._Register.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Register.Entity = null;
						previousValue.Learner = null;
					}
					this._Register.Entity = value;
					if ((value != null))
					{
						value.Learner = this;
					}
					this.SendPropertyChanged("Register");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Learner_Mark", Storage="_Marks", ThisKey="learner_id", OtherKey="learner_id")]
		public EntitySet<Mark> Marks
		{
			get
			{
				return this._Marks;
			}
			set
			{
				this._Marks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Learner_Concern", Storage="_Concerns", ThisKey="learner_id", OtherKey="learner_id")]
		public EntitySet<Concern> Concerns
		{
			get
			{
				return this._Concerns;
			}
			set
			{
				this._Concerns.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Learner", Storage="_Class", ThisKey="class_id", OtherKey="class_id", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.Learners.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.Learners.Add(this);
						this._class_id = value.class_id;
					}
					else
					{
						this._class_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Learner", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Learners.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Learners.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Learner = this;
		}
		
		private void detach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Learner = null;
		}
		
		private void attach_Concerns(Concern entity)
		{
			this.SendPropertyChanging();
			entity.Learner = this;
		}
		
		private void detach_Concerns(Concern entity)
		{
			this.SendPropertyChanging();
			entity.Learner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subject_id;
		
		private string _name;
		
		private EntitySet<Register> _Registers;
		
		private EntitySet<Mark> _Marks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsubject_idChanging(int value);
    partial void Onsubject_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Subject()
		{
			this._Registers = new EntitySet<Register>(new Action<Register>(this.attach_Registers), new Action<Register>(this.detach_Registers));
			this._Marks = new EntitySet<Mark>(new Action<Mark>(this.attach_Marks), new Action<Mark>(this.detach_Marks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subject_id
		{
			get
			{
				return this._subject_id;
			}
			set
			{
				if ((this._subject_id != value))
				{
					this.Onsubject_idChanging(value);
					this.SendPropertyChanging();
					this._subject_id = value;
					this.SendPropertyChanged("subject_id");
					this.Onsubject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Register", Storage="_Registers", ThisKey="subject_id", OtherKey="subject_id")]
		public EntitySet<Register> Registers
		{
			get
			{
				return this._Registers;
			}
			set
			{
				this._Registers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Mark", Storage="_Marks", ThisKey="subject_id", OtherKey="subject_id")]
		public EntitySet<Mark> Marks
		{
			get
			{
				return this._Marks;
			}
			set
			{
				this._Marks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Registers(Register entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Registers(Register entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
		
		private void attach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}
		
		private void detach_Marks(Mark entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registers")]
	public partial class Register : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _register_id;
		
		private System.Nullable<int> _learner_id;
		
		private System.Nullable<int> _user_id;
		
		private System.Nullable<int> _subject_id;
		
		private System.Nullable<bool> _isPresent;
		
		private System.Nullable<System.DateTime> _timeStamp;
		
		private EntityRef<Learner> _Learner;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onregister_idChanging(int value);
    partial void Onregister_idChanged();
    partial void Onlearner_idChanging(System.Nullable<int> value);
    partial void Onlearner_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onsubject_idChanging(System.Nullable<int> value);
    partial void Onsubject_idChanged();
    partial void OnisPresentChanging(System.Nullable<bool> value);
    partial void OnisPresentChanged();
    partial void OntimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OntimeStampChanged();
    #endregion
		
		public Register()
		{
			this._Learner = default(EntityRef<Learner>);
			this._Subject = default(EntityRef<Subject>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_register_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int register_id
		{
			get
			{
				return this._register_id;
			}
			set
			{
				if ((this._register_id != value))
				{
					if (this._Learner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onregister_idChanging(value);
					this.SendPropertyChanging();
					this._register_id = value;
					this.SendPropertyChanged("register_id");
					this.Onregister_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_learner_id", DbType="Int")]
		public System.Nullable<int> learner_id
		{
			get
			{
				return this._learner_id;
			}
			set
			{
				if ((this._learner_id != value))
				{
					this.Onlearner_idChanging(value);
					this.SendPropertyChanging();
					this._learner_id = value;
					this.SendPropertyChanged("learner_id");
					this.Onlearner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject_id", DbType="Int")]
		public System.Nullable<int> subject_id
		{
			get
			{
				return this._subject_id;
			}
			set
			{
				if ((this._subject_id != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsubject_idChanging(value);
					this.SendPropertyChanging();
					this._subject_id = value;
					this.SendPropertyChanged("subject_id");
					this.Onsubject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isPresent", DbType="Bit")]
		public System.Nullable<bool> isPresent
		{
			get
			{
				return this._isPresent;
			}
			set
			{
				if ((this._isPresent != value))
				{
					this.OnisPresentChanging(value);
					this.SendPropertyChanging();
					this._isPresent = value;
					this.SendPropertyChanged("isPresent");
					this.OnisPresentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> timeStamp
		{
			get
			{
				return this._timeStamp;
			}
			set
			{
				if ((this._timeStamp != value))
				{
					this.OntimeStampChanging(value);
					this.SendPropertyChanging();
					this._timeStamp = value;
					this.SendPropertyChanged("timeStamp");
					this.OntimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Learner_Register", Storage="_Learner", ThisKey="register_id", OtherKey="learner_id", IsForeignKey=true)]
		public Learner Learner
		{
			get
			{
				return this._Learner.Entity;
			}
			set
			{
				Learner previousValue = this._Learner.Entity;
				if (((previousValue != value) 
							|| (this._Learner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Learner.Entity = null;
						previousValue.Register = null;
					}
					this._Learner.Entity = value;
					if ((value != null))
					{
						value.Register = this;
						this._register_id = value.learner_id;
					}
					else
					{
						this._register_id = default(int);
					}
					this.SendPropertyChanged("Learner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Register", Storage="_Subject", ThisKey="subject_id", OtherKey="subject_id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Registers.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Registers.Add(this);
						this._subject_id = value.subject_id;
					}
					else
					{
						this._subject_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Register", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registers.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marks")]
	public partial class Mark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _mark_id;
		
		private System.Nullable<int> _learner_id;
		
		private System.Nullable<int> _user_id;
		
		private System.Nullable<int> _subject_id;
		
		private System.Nullable<int> _marks;
		
		private string _description;
		
		private EntityRef<Learner> _Learner;
		
		private EntityRef<Subject> _Subject;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onmark_idChanging(int value);
    partial void Onmark_idChanged();
    partial void Onlearner_idChanging(System.Nullable<int> value);
    partial void Onlearner_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onsubject_idChanging(System.Nullable<int> value);
    partial void Onsubject_idChanged();
    partial void OnmarksChanging(System.Nullable<int> value);
    partial void OnmarksChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Mark()
		{
			this._Learner = default(EntityRef<Learner>);
			this._Subject = default(EntityRef<Subject>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mark_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int mark_id
		{
			get
			{
				return this._mark_id;
			}
			set
			{
				if ((this._mark_id != value))
				{
					this.Onmark_idChanging(value);
					this.SendPropertyChanging();
					this._mark_id = value;
					this.SendPropertyChanged("mark_id");
					this.Onmark_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_learner_id", DbType="Int")]
		public System.Nullable<int> learner_id
		{
			get
			{
				return this._learner_id;
			}
			set
			{
				if ((this._learner_id != value))
				{
					if (this._Learner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlearner_idChanging(value);
					this.SendPropertyChanging();
					this._learner_id = value;
					this.SendPropertyChanged("learner_id");
					this.Onlearner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject_id", DbType="Int")]
		public System.Nullable<int> subject_id
		{
			get
			{
				return this._subject_id;
			}
			set
			{
				if ((this._subject_id != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsubject_idChanging(value);
					this.SendPropertyChanging();
					this._subject_id = value;
					this.SendPropertyChanged("subject_id");
					this.Onsubject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marks", DbType="Int")]
		public System.Nullable<int> marks
		{
			get
			{
				return this._marks;
			}
			set
			{
				if ((this._marks != value))
				{
					this.OnmarksChanging(value);
					this.SendPropertyChanging();
					this._marks = value;
					this.SendPropertyChanged("marks");
					this.OnmarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(50)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Learner_Mark", Storage="_Learner", ThisKey="learner_id", OtherKey="learner_id", IsForeignKey=true)]
		public Learner Learner
		{
			get
			{
				return this._Learner.Entity;
			}
			set
			{
				Learner previousValue = this._Learner.Entity;
				if (((previousValue != value) 
							|| (this._Learner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Learner.Entity = null;
						previousValue.Marks.Remove(this);
					}
					this._Learner.Entity = value;
					if ((value != null))
					{
						value.Marks.Add(this);
						this._learner_id = value.learner_id;
					}
					else
					{
						this._learner_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Learner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Mark", Storage="_Subject", ThisKey="subject_id", OtherKey="subject_id", IsForeignKey=true)]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value) 
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Marks.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Marks.Add(this);
						this._subject_id = value.subject_id;
					}
					else
					{
						this._subject_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Mark", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Marks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Marks.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Concerns")]
	public partial class Concern : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _concern_id;
		
		private System.Nullable<int> _user_id;
		
		private System.Nullable<int> _learner_id;
		
		private string _message;
		
		private System.Nullable<System.DateTime> _timestamp;
		
		private EntityRef<Learner> _Learner;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onconcern_idChanging(int value);
    partial void Onconcern_idChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void Onlearner_idChanging(System.Nullable<int> value);
    partial void Onlearner_idChanged();
    partial void OnmessageChanging(string value);
    partial void OnmessageChanged();
    partial void OntimestampChanging(System.Nullable<System.DateTime> value);
    partial void OntimestampChanged();
    #endregion
		
		public Concern()
		{
			this._Learner = default(EntityRef<Learner>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_concern_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int concern_id
		{
			get
			{
				return this._concern_id;
			}
			set
			{
				if ((this._concern_id != value))
				{
					this.Onconcern_idChanging(value);
					this.SendPropertyChanging();
					this._concern_id = value;
					this.SendPropertyChanged("concern_id");
					this.Onconcern_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_learner_id", DbType="Int")]
		public System.Nullable<int> learner_id
		{
			get
			{
				return this._learner_id;
			}
			set
			{
				if ((this._learner_id != value))
				{
					if (this._Learner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlearner_idChanging(value);
					this.SendPropertyChanging();
					this._learner_id = value;
					this.SendPropertyChanged("learner_id");
					this.Onlearner_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_message", DbType="VarChar(MAX)")]
		public string message
		{
			get
			{
				return this._message;
			}
			set
			{
				if ((this._message != value))
				{
					this.OnmessageChanging(value);
					this.SendPropertyChanging();
					this._message = value;
					this.SendPropertyChanged("message");
					this.OnmessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Learner_Concern", Storage="_Learner", ThisKey="learner_id", OtherKey="learner_id", IsForeignKey=true)]
		public Learner Learner
		{
			get
			{
				return this._Learner.Entity;
			}
			set
			{
				Learner previousValue = this._Learner.Entity;
				if (((previousValue != value) 
							|| (this._Learner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Learner.Entity = null;
						previousValue.Concerns.Remove(this);
					}
					this._Learner.Entity = value;
					if ((value != null))
					{
						value.Concerns.Add(this);
						this._learner_id = value.learner_id;
					}
					else
					{
						this._learner_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Learner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Concern", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Concerns.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Concerns.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsEntries")]
	public partial class NewsEntry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _news_id;
		
		private string _news_text;
		
		private System.Nullable<int> _user_id;
		
		private System.Nullable<System.DateTime> _timestamp;
		
		private string _title;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onnews_idChanging(int value);
    partial void Onnews_idChanged();
    partial void Onnews_textChanging(string value);
    partial void Onnews_textChanged();
    partial void Onuser_idChanging(System.Nullable<int> value);
    partial void Onuser_idChanged();
    partial void OntimestampChanging(System.Nullable<System.DateTime> value);
    partial void OntimestampChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public NewsEntry()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_news_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int news_id
		{
			get
			{
				return this._news_id;
			}
			set
			{
				if ((this._news_id != value))
				{
					this.Onnews_idChanging(value);
					this.SendPropertyChanging();
					this._news_id = value;
					this.SendPropertyChanged("news_id");
					this.Onnews_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_news_text", DbType="VarChar(MAX)")]
		public string news_text
		{
			get
			{
				return this._news_text;
			}
			set
			{
				if ((this._news_text != value))
				{
					this.Onnews_textChanging(value);
					this.SendPropertyChanging();
					this._news_text = value;
					this.SendPropertyChanged("news_text");
					this.Onnews_textChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int")]
		public System.Nullable<int> user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> timestamp
		{
			get
			{
				return this._timestamp;
			}
			set
			{
				if ((this._timestamp != value))
				{
					this.OntimestampChanging(value);
					this.SendPropertyChanging();
					this._timestamp = value;
					this.SendPropertyChanged("timestamp");
					this.OntimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50)")]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_NewsEntry", Storage="_User", ThisKey="user_id", OtherKey="user_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.NewsEntries.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.NewsEntries.Add(this);
						this._user_id = value.user_id;
					}
					else
					{
						this._user_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
